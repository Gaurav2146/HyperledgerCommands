//Peer Org Config
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
export CORE_PEER_ADDRESS=localhost:7051
export CH_NAME=mychannel
export CHANNEL_NAME=mychannel
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
export FABRIC_CFG_PATH=$PWD/../config/
export PATH=${PWD}/../bin:$PATH

//Ordere Org Config
export CH_NAME=mychannel
export CHANNEL_NAME=mychannel
export CORE_PEER_TLS_ENABLED=true
export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem


export CORE_PEER_LOCALMSPID="OrdererMSP"
export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/ordererOrganizations/example.com/users/Admin@example.com/msp
export CORE_PEER_ADDRESS=localhost:7050
export FABRIC_CFG_PATH=$PWD/../config/
export PATH=${PWD}/../bin:$PATH


// You can select any peer organization or orderer organization to do these steps.

peer channel fetch config config_block.pb -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME --tls --cafile $ORDERER_CA


configtxlator proto_decode --input config_block.pb --type common.Block --output config_block.json

jq .data.data[0].payload.data.config config_block.json > config.json

cp config.json modified_config.json

configtxlator proto_encode --input config.json --type common.Config --output config.pb

configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb

configtxlator compute_update --channel_id $CH_NAME --original config.pb --updated modified_config.pb --output config_update.pb

configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate --output config_update.json

echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CH_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . > config_update_in_envelope.json

configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope --output config_update_in_envelope.pb

// In this last two step you must select orderer org.

peer channel signconfigtx -f config_update_in_envelope.pb

peer channel update -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com -f config_update_in_envelope.pb -c $CH_NAME --tls --cafile $ORDERER_CA


sudo rm -rf config_block.json

sudo rm -rf config_block.pb

sudo rm -rf config_update_in_envelope.json

sudo rm -rf config_update_in_envelope.pb

sudo rm -rf config_update.json

sudo rm -rf config_update.pb

sudo rm -rf config.json

sudo rm -rf config.pb

sudo rm -rf modified_config.json

sudo rm -rf modified_config.pb






////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


peer channel fetch config config_block.pb -o localhost:7050  --ordererTLSHostnameOverride orderer.example.com -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config >config.json







/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export TLS_ROOT_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export ORDERER_CONTAINER=orderer.example.com




